// gRPC 使用协定优先方法进行 API 开发。 默认情况下，协议缓冲区 (protobuf) 用作接口定义语言 (IDL)。 .proto 文件包含：
// gRPC 服务的定义。
// 在客户端与服务器之间发送的消息。


 // gRPC 支持的 10 种默认语言中的每一种都有多个层，允许您自定义应用程序中所需的部分。
// gRPC 中有三个主要堆栈：C-core、Go 和 Java。大多数语言都是基于 C 的 gRPC 核心库：
// C# 语言
// https://grpc.io/img/grpc-core-stack.svg

syntax = "proto3";

option csharp_namespace = "GrpcGreeterClient";

package example;



service Example{
	// 简单 RPC（Unary RPC） 一般的rpc调用，传入一个请求对象，返回一个返回对象；一般的rpc调用，传入一个请求对象，返回一个返回对象
	rpc UnaryCall(ExampleRequest) returns (ExampleResponse); 

	//服务端流式 RPC	 传入一个请求对象，服务端可以返回多个结果对象
	rpc StreamingFromServer(ExampleRequest)  returns (stream ExampleResponse);
    rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);
	rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
}


// 对于传入请求数据，gRPC 方法始终有一个消息参数。 通过在请求消息中设置多个值字段，仍可以将多个值发送到 gRPC 服务：
message ExampleRequest{
	 int32 pageIndex = 1;
    int32 pageSize = 2;
    bool isDescending = 3;
}

message ExampleResponse {
  string message = 1;
}
