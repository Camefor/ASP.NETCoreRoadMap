// gRPC 使用协定优先方法进行 API 开发。 默认情况下，协议缓冲区 (protobuf) 用作接口定义语言 (IDL)。 .proto 文件包含：
// gRPC 服务的定义。
// 在客户端与服务器之间发送的消息。


 // gRPC 支持的 10 种默认语言中的每一种都有多个层，允许您自定义应用程序中所需的部分。
// gRPC 中有三个主要堆栈：C-core、Go 和 Java。大多数语言都是基于 C 的 gRPC 核心库：
// C# 语言
// https://grpc.io/img/grpc-core-stack.svg

syntax = "proto3";

option csharp_namespace = "GrpcGreeter";

package example;



service Example{
	// 简单 RPC（Unary RPC） 一般的rpc调用，传入一个请求对象，返回一个返回对象；一般的rpc调用，传入一个请求对象，返回一个返回对象
	rpc UnaryCall(ExampleRequest) returns (ExampleResponse); 

	//服务端流式 RPC	 传入一个请求对象，服务端可以返回多个结果对象 ,
	//典型的例子是客户端向服务端发送一个股票代码，服务端就把该股票的实时数据源源不断的返回给客户端
	rpc StreamingFromServer(ExampleRequest)  returns (stream ExampleResponse);

	// 客户端流式rpc 应用场景： 物联网终端向服务器报送数据。
	  rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);

	// 双向流式rpc 结合客户端流式rpc和服务端流式rpc，可以传入多个对象，返回多个响应对象
	//proto语法 :应用场景：聊天应用。
	rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
}



message ExampleRequest{
	 int32 pageIndex = 1;
    int32 pageSize = 2;
    bool isDescending = 3;
}

message ExampleResponse {
  string message = 1;
}
